import { isIterable, isString } from "@thi.ng/checks";
import { compR } from "../func/compr";
import { iterator } from "../iterator";
import { isReduced } from "../reduced";
export function flattenWith(fn, src) {
    return isIterable(src)
        ? iterator(flattenWith(fn), isString(src) ? [src] : src)
        : (rfn) => {
            const reduce = rfn[2];
            const flatten = (acc, x) => {
                const xx = fn(x);
                if (xx) {
                    for (let y of xx) {
                        acc = flatten(acc, y);
                        if (isReduced(acc)) {
                            break;
                        }
                    }
                    return acc;
                }
                return reduce(acc, x);
            };
            return compR(rfn, flatten);
        };
}
