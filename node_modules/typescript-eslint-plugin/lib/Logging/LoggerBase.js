"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubLogger = exports.LoggerBase = void 0;
const LogLevel_1 = require("./LogLevel");
/**
 * Provides the functionality to log messages.
 */
class LoggerBase {
    /**
     * Initializes a new instance of the `LoggerBase` class.
     *
     * @param category
     * The category of the logger.
     */
    constructor(category) {
        /**
         * Gets or sets the category of the logger.
         */
        this.Category = null;
        this.Category = category;
    }
    /**
     * Gets the prefix for the log-messages.
     */
    get Prefix() {
        if (this.Category) {
            return `[${this.Category}]`;
        }
        else {
            return "";
        }
    }
    /**
     * Creates a sub-logger.
     *
     * @param category
     * The category of the sub-logger.
     *
     * @returns
     * The newly created sub-logger.
     */
    CreateSubLogger(category) {
        return new SubLogger(this, category);
    }
    /**
     * Prints an info-message.
     *
     * @param message
     * The message to print.
     */
    Info(message) {
        this.Log(message, LogLevel_1.LogLevel.Info);
    }
    /**
     * Prints a verbose message.
     *
     * @param message
     * The message to print.
     */
    Verbose(message) {
        this.Log(message, LogLevel_1.LogLevel.Verbose);
    }
    /**
     * Prints a log-message.
     *
     * @param message
     * The message to print.
     *
     * @param logLevel
     * The log-level of the message.
     */
    Log(message, logLevel) {
        if ((logLevel !== LogLevel_1.LogLevel.None) &&
            ((logLevel !== LogLevel_1.LogLevel.Verbose) || (this.LogLevel === LogLevel_1.LogLevel.Verbose))) {
            if (this.Category) {
                message = `${this.Prefix} ${message}`;
            }
            this.Write(message, logLevel !== null && logLevel !== void 0 ? logLevel : LogLevel_1.LogLevel.Info);
        }
    }
}
exports.LoggerBase = LoggerBase;
/**
 * Represents a logger that is attached to a parent logger.
 */
class SubLogger extends LoggerBase {
    /**
     * Initializes a new instance of the `SubLogger` class.
     *
     * @param parent
     * The parent of the logger.
     *
     * @param category
     * The category of the logger.
     */
    constructor(parent, category) {
        super(category);
        this.Parent = parent;
    }
    /**
     * @inheritdoc
     */
    get LogLevel() {
        return this.Parent.LogLevel;
    }
    /**
     * Gets the category-path of the logger.
     */
    get CategoryPath() {
        let result;
        if (this.Parent instanceof SubLogger) {
            result = this.Parent.CategoryPath;
        }
        else {
            result = [this.Parent.Category];
        }
        result.push(this.Category);
        return result;
    }
    /**
     * Gets the top-level sub-logger.
     */
    get RootSubLogger() {
        let result;
        let logger = this;
        while (logger instanceof SubLogger) {
            result = logger;
            logger = logger.Parent;
        }
        return result;
    }
    /**
     * @inheritdoc
     */
    get Prefix() {
        return this.CategoryPath.map((node) => `[${node}]`).join("") + " ";
    }
    /**
     * Gets or sets the logger of this sub-logger.
     */
    get RootLogger() {
        return this.RootSubLogger.Parent;
    }
    /**
     * @inheritdoc
     */
    set RootLogger(value) {
        this.RootSubLogger.Parent = value;
    }
    /**
     * Writes a message to the log.
     *
     * @param message
     * The message to write.
     *
     * @param logLevel
     * The log-level of the message.
     */
    Write(message, logLevel) {
        this.RootLogger.Write(message, logLevel);
    }
}
exports.SubLogger = SubLogger;
//# sourceMappingURL=LoggerBase.js.map