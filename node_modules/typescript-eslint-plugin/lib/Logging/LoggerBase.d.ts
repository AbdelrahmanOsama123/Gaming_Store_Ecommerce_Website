import { LogLevel } from "./LogLevel";
/**
 * Provides the functionality to log messages.
 */
export declare abstract class LoggerBase {
    /**
     * Gets or sets the category of the logger.
     */
    Category: string;
    /**
     * Initializes a new instance of the `LoggerBase` class.
     *
     * @param category
     * The category of the logger.
     */
    constructor(category?: string);
    /**
     * Gets the log-level to log.
     */
    abstract get LogLevel(): LogLevel;
    /**
     * Gets the prefix for the log-messages.
     */
    protected get Prefix(): string;
    /**
     * Creates a sub-logger.
     *
     * @param category
     * The category of the sub-logger.
     *
     * @returns
     * The newly created sub-logger.
     */
    CreateSubLogger(category: string): LoggerBase;
    /**
     * Prints an info-message.
     *
     * @param message
     * The message to print.
     */
    Info(message: string): void;
    /**
     * Prints a verbose message.
     *
     * @param message
     * The message to print.
     */
    Verbose(message: string): void;
    /**
     * Prints a log-message.
     *
     * @param message
     * The message to print.
     *
     * @param logLevel
     * The log-level of the message.
     */
    Log(message: string, logLevel?: LogLevel): void;
    /**
     * Writes a message to the log.
     *
     * @param message
     * The message to write.
     *
     * @param logLevel
     * The log-level of the message.
     */
    protected abstract Write(message: string, logLevel: LogLevel): void;
}
/**
 * Represents a logger that is attached to a parent logger.
 */
export declare class SubLogger extends LoggerBase {
    /**
     * Gets or sets the parent of the logger.
     */
    Parent: LoggerBase;
    /**
     * Initializes a new instance of the `SubLogger` class.
     *
     * @param parent
     * The parent of the logger.
     *
     * @param category
     * The category of the logger.
     */
    constructor(parent: LoggerBase, category: string);
    /**
     * @inheritdoc
     */
    get LogLevel(): LogLevel;
    /**
     * Gets the category-path of the logger.
     */
    protected get CategoryPath(): string[];
    /**
     * Gets the top-level sub-logger.
     */
    protected get RootSubLogger(): SubLogger;
    /**
     * @inheritdoc
     */
    protected get Prefix(): string;
    /**
     * Gets or sets the logger of this sub-logger.
     */
    protected get RootLogger(): LoggerBase;
    /**
     * @inheritdoc
     */
    protected set RootLogger(value: LoggerBase);
    /**
     * Writes a message to the log.
     *
     * @param message
     * The message to write.
     *
     * @param logLevel
     * The log-level of the message.
     */
    protected Write(message: string, logLevel: LogLevel): void;
}
