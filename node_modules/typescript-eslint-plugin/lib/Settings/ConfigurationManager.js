"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigurationManager = void 0;
const LogLevel_1 = require("../Logging/LogLevel");
const Configuration_1 = require("./Configuration");
/**
 * Proides the functionality to manage and automatically reload configurations.
 */
class ConfigurationManager {
    /**
     * Initializes a new instance of the `ConfigurationManager` class.
     *
     * @param pluginModule
     * The plugin of the configuration-manager.
     */
    constructor(pluginModule) {
        /**
         * Information for the plugin.
         */
        this.pluginInfo = null;
        /**
         * The event-handlers for the `ConfigUpdated`-event.
         */
        this.configUpdated = new Set();
        this.plugin = pluginModule;
        this.config = new Configuration_1.Configuration({}, this);
    }
    /**
     * Gets the plugin.
     */
    get Plugin() {
        return this.plugin;
    }
    /**
     * Gets or sets information for the plugin.
     */
    get PluginInfo() {
        return this.pluginInfo;
    }
    /**
     * @inheritdoc
     */
    set PluginInfo(value) {
        this.pluginInfo = value;
        this.OnConfigUpdated();
    }
    /**
     * Gets a component for writing log-messages.
     */
    get RealLogger() {
        return this.Plugin.RealLogger.CreateSubLogger(ConfigurationManager.name);
    }
    /**
     * Gets a component for writing log-messages.
     */
    get Logger() {
        if (this.Config.LogLevel !== LogLevel_1.LogLevel.None) {
            return this.RealLogger;
        }
        else {
            return null;
        }
    }
    /**
     * Gets or sets the configuration.
     */
    get Config() {
        return this.config;
    }
    /**
     * Occurs when the config is updated.
     */
    get ConfigUpdated() {
        return {
            add: (eventHandler) => this.configUpdated.add(eventHandler),
            delete: (eventHandler) => this.configUpdated.delete(eventHandler)
        };
    }
    /**
     * Updates the configuration.
     *
     * @param config
     * The config to load.
     */
    Update(config) {
        var _a;
        (_a = this.Logger) === null || _a === void 0 ? void 0 : _a.Log("Updating the configuration…");
        this.config = new Configuration_1.Configuration(config, this);
        this.OnConfigUpdated();
    }
    /**
     * Executes the `ConfigUpdated` event-handlers.
     */
    OnConfigUpdated() {
        var _a, _b;
        (_a = this.Logger) === null || _a === void 0 ? void 0 : _a.Log("The configuration has been updated.");
        (_b = this.Logger) === null || _b === void 0 ? void 0 : _b.Log("Invoking event-handlers…");
        for (let eventHandler of this.configUpdated) {
            eventHandler();
        }
    }
}
exports.ConfigurationManager = ConfigurationManager;
//# sourceMappingURL=ConfigurationManager.js.map