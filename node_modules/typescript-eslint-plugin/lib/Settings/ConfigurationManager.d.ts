import ts = require("typescript/lib/tsserverlibrary");
import { LoggerBase } from "../Logging/LoggerBase";
import { Plugin } from "../Plugin";
import { Configuration } from "./Configuration";
import { ITSConfiguration } from "./ITSConfiguration";
/**
 * Proides the functionality to manage and automatically reload configurations.
 */
export declare class ConfigurationManager {
    /**
     * The plugin.
     */
    private plugin;
    /**
     * Information for the plugin.
     */
    private pluginInfo;
    /**
     * The configuration.
     */
    private config;
    /**
     * The event-handlers for the `ConfigUpdated`-event.
     */
    private readonly configUpdated;
    /**
     * Initializes a new instance of the `ConfigurationManager` class.
     *
     * @param pluginModule
     * The plugin of the configuration-manager.
     */
    constructor(pluginModule: Plugin);
    /**
     * Gets the plugin.
     */
    get Plugin(): Plugin;
    /**
     * Gets or sets information for the plugin.
     */
    get PluginInfo(): ts.server.PluginCreateInfo;
    /**
     * @inheritdoc
     */
    set PluginInfo(value: ts.server.PluginCreateInfo);
    /**
     * Gets a component for writing log-messages.
     */
    get RealLogger(): LoggerBase;
    /**
     * Gets a component for writing log-messages.
     */
    get Logger(): LoggerBase;
    /**
     * Gets or sets the configuration.
     */
    get Config(): Configuration;
    /**
     * Occurs when the config is updated.
     */
    get ConfigUpdated(): Pick<Set<() => void>, "add" | "delete">;
    /**
     * Updates the configuration.
     *
     * @param config
     * The config to load.
     */
    Update(config: ITSConfiguration): void;
    /**
     * Executes the `ConfigUpdated` event-handlers.
     */
    protected OnConfigUpdated(): void;
}
