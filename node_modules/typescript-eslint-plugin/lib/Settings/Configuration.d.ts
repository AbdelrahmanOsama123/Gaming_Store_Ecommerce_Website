import { LogLevel } from "../Logging/LogLevel";
import { ConfigurationManager } from "./ConfigurationManager";
import { ITSConfiguration } from "./ITSConfiguration";
import { PackageManager } from "./PackageManager";
/**
 * Represents settings for the plugin.
 */
export declare class Configuration {
    /**
     * The configuration.
     */
    private config;
    /**
     * The configuration-manager of this configuration.
     */
    private configurationManager;
    /**
     * Initializes a new instance of the `Configuration` class.
     *
     * @param config
     * The `json`-flavored representation of the configuration.
     *
     * @param configurationManager
     * The configuration-manager.
     */
    constructor(config?: ITSConfiguration, configurationManager?: ConfigurationManager);
    /**
     * Gets a value indicating whether JavaScript-files should be ignored.
     */
    get IgnoreJavaScript(): boolean;
    /**
     * Gets a value indicating whether TypeScript-files should be ignored.
     */
    get IgnoreTypeScript(): boolean;
    /**
     * Gets a value indicating whether eslint-comments are allowed.
     */
    get AllowInlineConfig(): boolean;
    /**
     * Gets a value indicating whether unused "disabled"-directives should be reported.
     */
    get ReportUnusedDisableDirectives(): boolean;
    /**
     * Gets a value indicating whether eslintrc-files should be respected.
     */
    get UseESLintRC(): boolean;
    /**
     * Gets the path to load the configuration from.
     */
    get ConfigFile(): string;
    /**
     * Gets a value indicating whether failures always should be considered as warnings.
     */
    get AlwaysShowRuleFailuresAsWarnings(): boolean;
    /**
     * Gets a value indicating whether errors of this plugin should be suppressed while other errors are present.
     */
    get SuppressWhileTypeErrorsPresent(): boolean;
    /**
     * Gets a value indicating whether warnings about deprecated rules should be suppressed.
     */
    get SuppressDeprecationWarnings(): boolean;
    /**
     * Gets a value indicating whether errors about missing `.eslintrc`-files should be suppressed.
     */
    get SuppressConfigNotFoundError(): boolean;
    /**
     * Gets the package-manager for loading global packages and providing command-recommendations.
     */
    get PackageManager(): PackageManager;
    /**
     * Gets the log-level that should be piped to the `info`-channel.
     */
    get LogLevel(): LogLevel;
    /**
     * Gets information for the plugin.
     */
    protected get PluginInfo(): ts.server.PluginCreateInfo;
    /**
     * Returns a JSON-string representing this object.
     *
     * @returns
     * A JSON-string representing the configuration.
     */
    ToJSON(): string;
    /**
     * Parses an enum-setting.
     *
     * @param setting
     * The setting to parse.
     *
     * @param enumDeclaration
     * The enum to parse.
     *
     * @param defaultValue
     * The default value.
     *
     * @returns
     * The configured enum-value.
     */
    protected ParseEnumConfig<T>(setting: string, enumDeclaration: {
        [key: string]: string & T;
    }, defaultValue: T): T;
    /**
     * Gets a config-entry.
     *
     * @param key
     * The key of the property to get.
     *
     * @param defaultValue
     * The default value.
     *
     * @returns
     * The configured setting.
     */
    protected GetSetting<TKey extends keyof ITSConfiguration>(key: TKey, defaultValue: ITSConfiguration[TKey]): ITSConfiguration[TKey];
    /**
     * Gets the log-level.
     *
     * @param configValue
     * The value specified in the configuration.
     *
     * @param defaultValue
     * The default configuration-value.
     *
     * @returns
     * The configured log-level.
     */
    protected GetLogLevel(configValue: string, defaultValue: LogLevel): LogLevel;
}
