"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Configuration = void 0;
const util_1 = require("util");
const pick = require("lodash.pick");
const ConfigurationLogger_1 = require("../Logging/ConfigurationLogger");
const LogLevel_1 = require("../Logging/LogLevel");
const PackageManager_1 = require("./PackageManager");
/**
 * Represents settings for the plugin.
 */
class Configuration {
    /**
     * Initializes a new instance of the `Configuration` class.
     *
     * @param config
     * The `json`-flavored representation of the configuration.
     *
     * @param configurationManager
     * The configuration-manager.
     */
    constructor(config, configurationManager) {
        this.config = config !== null && config !== void 0 ? config : {};
        this.configurationManager = configurationManager;
    }
    /**
     * Gets a value indicating whether JavaScript-files should be ignored.
     */
    get IgnoreJavaScript() {
        return this.GetSetting("ignoreJavaScript", false);
    }
    /**
     * Gets a value indicating whether TypeScript-files should be ignored.
     */
    get IgnoreTypeScript() {
        return this.GetSetting("ignoreTypeScript", false);
    }
    /**
     * Gets a value indicating whether eslint-comments are allowed.
     */
    get AllowInlineConfig() {
        return this.GetSetting("allowInlineConfig", true);
    }
    /**
     * Gets a value indicating whether unused "disabled"-directives should be reported.
     */
    get ReportUnusedDisableDirectives() {
        return this.GetSetting("reportUnusedDisableDirectives", true);
    }
    /**
     * Gets a value indicating whether eslintrc-files should be respected.
     */
    get UseESLintRC() {
        return this.GetSetting("useEslintrc", true);
    }
    /**
     * Gets the path to load the configuration from.
     */
    get ConfigFile() {
        return this.GetSetting("configFile", undefined);
    }
    /**
     * Gets a value indicating whether failures always should be considered as warnings.
     */
    get AlwaysShowRuleFailuresAsWarnings() {
        return this.GetSetting("alwaysShowRuleFailuresAsWarnings", false);
    }
    /**
     * Gets a value indicating whether errors of this plugin should be suppressed while other errors are present.
     */
    get SuppressWhileTypeErrorsPresent() {
        return this.GetSetting("suppressWhileTypeErrorsPresent", false);
    }
    /**
     * Gets a value indicating whether warnings about deprecated rules should be suppressed.
     */
    get SuppressDeprecationWarnings() {
        return this.GetSetting("suppressDeprecationWarnings", false);
    }
    /**
     * Gets a value indicating whether errors about missing `.eslintrc`-files should be suppressed.
     */
    get SuppressConfigNotFoundError() {
        return this.GetSetting("suppressConfigNotFoundError", true);
    }
    /**
     * Gets the package-manager for loading global packages and providing command-recommendations.
     */
    get PackageManager() {
        let defaultValue = PackageManager_1.PackageManager.NPM;
        return this.ParseEnumConfig(this.GetSetting("packageManager", defaultValue), PackageManager_1.PackageManager, defaultValue);
    }
    /**
     * Gets the log-level that should be piped to the `info`-channel.
     */
    get LogLevel() {
        let defaultValue = LogLevel_1.LogLevel.None;
        return this.GetLogLevel(this.GetSetting("logLevel", defaultValue), defaultValue);
    }
    /**
     * Gets information for the plugin.
     */
    get PluginInfo() {
        var _a;
        return (_a = this.configurationManager) === null || _a === void 0 ? void 0 : _a.PluginInfo;
    }
    /**
     * Returns a JSON-string representing this object.
     *
     * @returns
     * A JSON-string representing the configuration.
     */
    ToJSON() {
        return JSON.stringify(pick(this, "IgnoreJavaScript", "IgnoreTypeScript", "AllowInlineConfig", "ReportUnusedDisableDirectives", "UseESLintRC", "ConfigFile", "AlwaysShowRuleFailuresAsWarnings", "SuppressWhileTypeErrorsPresent", "SuppressDeprecationWarnings", "PackageManager", "LogLevel"));
    }
    /**
     * Parses an enum-setting.
     *
     * @param setting
     * The setting to parse.
     *
     * @param enumDeclaration
     * The enum to parse.
     *
     * @param defaultValue
     * The default value.
     *
     * @returns
     * The configured enum-value.
     */
    ParseEnumConfig(setting, enumDeclaration, defaultValue) {
        let result;
        if (!util_1.isUndefined(setting) &&
            Object.keys(enumDeclaration).some((key) => enumDeclaration[key] === setting)) {
            result = setting;
        }
        else {
            result = defaultValue;
        }
        return result;
    }
    /**
     * Gets a config-entry.
     *
     * @param key
     * The key of the property to get.
     *
     * @param defaultValue
     * The default value.
     *
     * @returns
     * The configured setting.
     */
    GetSetting(key, defaultValue) {
        var _a, _b;
        /**
         * Resolves the plugin configuration-value.
         *
         * @returns
         * The plugin configuration-value.
         */
        let pluginConfigValue = () => { var _a, _b; return (_b = (_a = this.PluginInfo) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b[key]; };
        /**
         * Resolves the runtime configuration-value.
         *
         * @returns
         * The runtime configuration-value.
         */
        let runtimeValue = () => this.config[key];
        let result = (_b = (_a = pluginConfigValue()) !== null && _a !== void 0 ? _a : runtimeValue()) !== null && _b !== void 0 ? _b : defaultValue;
        let logLevel = key === "logLevel" ? this.GetLogLevel(result, defaultValue) : this.LogLevel;
        if (logLevel !== LogLevel_1.LogLevel.None) {
            let logger = new ConfigurationLogger_1.ConfigurationLogger(logLevel, this.configurationManager.RealLogger, "Configuration");
            logger.Info(`Querying the \`${key}\`-settingâ€¦`);
            if (logLevel === LogLevel_1.LogLevel.Verbose) {
                logger.Verbose(`Plugin Configuration Value:  ${pluginConfigValue()}`);
                logger.Verbose(`Runtime Configuration Value: ${runtimeValue()}`);
                logger.Verbose(`Default Configuration Value: ${defaultValue}`);
            }
            logger.Info(`Result: ${result}`);
        }
        return result;
    }
    /**
     * Gets the log-level.
     *
     * @param configValue
     * The value specified in the configuration.
     *
     * @param defaultValue
     * The default configuration-value.
     *
     * @returns
     * The configured log-level.
     */
    GetLogLevel(configValue, defaultValue) {
        return this.ParseEnumConfig(configValue, LogLevel_1.LogLevel, defaultValue);
    }
}
exports.Configuration = Configuration;
//# sourceMappingURL=Configuration.js.map