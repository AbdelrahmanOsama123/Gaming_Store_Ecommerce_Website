import { CLIEngine, Linter } from "eslint";
import ts = require("typescript/lib/tsserverlibrary");
import { IMockedLanguageService } from "./Diagnostics/IMockedLanguageService";
import { Interceptor } from "./Interception/Interceptor";
import { LoggerBase } from "./Logging/LoggerBase";
import { PluginModule } from "./PluginModule";
import { Configuration } from "./Settings/Configuration";
import { ConfigurationManager } from "./Settings/ConfigurationManager";
import { ITSConfiguration } from "./Settings/ITSConfiguration";
/**
 * Represents a service for handling `eslint`-warnings.
 */
export declare class Plugin {
    /**
     * The module of this plugin.
     */
    private pluginModule;
    /**
     * A component for logging messages.
     */
    private logger;
    /**
     * A component for managing configurations.
     */
    private configurationManager;
    /**
     * The fix-actions for the project.
     */
    private lintDiagnostics;
    /**
     * A component for running eslint.
     */
    private runner;
    /**
     * A component for decorating fix-ids.
     */
    private idDecorator;
    /**
     * Initializes a new instance of the `Plugin` class.
     *
     * @param pluginModule
     * The module of this plugin.
     *
     * @param pluginInfo
     * The information about the plugin.
     */
    constructor(pluginModule: PluginModule, pluginInfo: ts.server.PluginCreateInfo);
    /**
     * Gets the module of this plugin.
     */
    protected get PluginModule(): PluginModule;
    /**
     * Gets the typescript-service.
     */
    get TypeScript(): typeof ts;
    /**
     * Gets a component for writing log-messages.
     */
    get RealLogger(): LoggerBase;
    /**
     * Gets a component for writing log-messages.
     */
    get Logger(): LoggerBase;
    /**
     * Gets a component for managing configurations.
     */
    get ConfigurationManager(): ConfigurationManager;
    /**
     * Gets the configuration.
     */
    get Config(): Configuration;
    /**
     * Gets or sets information for the plugin.
     */
    get PluginInfo(): ts.server.PluginCreateInfo;
    /**
     * Gets the language-service host.
     */
    get LanguageServiceHost(): ts.LanguageServiceHost;
    /**
     * Gets the project of the language-server.
     */
    get Project(): ts.server.Project;
    /**
     * Gets the program of the language-service.
     */
    get Program(): ts.Program;
    /**
     * Updates the configuration.
     *
     * @param config
     * The configuration to set.
     */
    UpdateConfig(config: ITSConfiguration): void;
    /**
     * Adds the plugin to the specified language-service.
     *
     * @param languageService
     * The language-service to add the plugin to.
     *
     * @returns
     * The decorated language-service.
     */
    Decorate(languageService: IMockedLanguageService): ts.LanguageService;
    /**
     * Creates diagnostic for a message.
     *
     * @param message
     * The message to create a diagnostic for.
     *
     * @param errorLevel
     * The error-level of the message.
     *
     * @param file
     * The file to add the diagnostic to.
     *
     * @returns
     * The newly created message.
     */
    protected CreateMessage(message: string, errorLevel: ts.DiagnosticCategory, file: ts.SourceFile): ts.Diagnostic;
    /**
     * Creates a diagnostic for a deprecated rule.
     *
     * @param file
     * The file to add the diagnostic to.
     *
     * @param deprecation
     * The depreaction to create a warning for.
     *
     * @returns
     * The newly created deprecation-warning.
     */
    protected CreateDeprecationWarning(file: ts.SourceFile, deprecation: CLIEngine.DeprecatedRuleUse): ts.Diagnostic;
    /**
     * Creates a diagnostic-object for a lint-message.
     *
     * @param lintMessage
     * The lint-message to add.
     *
     * @param file
     * The file to add the diagnostic to.
     *
     * @returns
     * The newly created lint-message.
     */
    protected CreateLintMessage(lintMessage: Linter.LintMessage, file: ts.SourceFile): ts.Diagnostic;
    /**
     * Creates a diagnostic for the specified text-span.
     *
     * @param file
     * The file to create a diagnostic for.
     *
     * @param textSpan
     * The text-span to create a diagnostic for.
     *
     * @param message
     * The message of the diagnostic.
     *
     * @param category
     * The category of the diagnostic.
     *
     * @returns
     * The newly created diagnostic.
     */
    protected CreateDiagnostic(file: ts.SourceFile, textSpan: ts.TextSpan, message: string, category: ts.DiagnosticCategory): ts.Diagnostic;
    /**
     * Gets the text-span of a lint-message.
     *
     * @param file
     * The file to get the position.
     *
     * @param lintMessage
     * The lint-message whose text-span to get.
     *
     * @returns
     * The text-span of the lint-message.
     */
    protected GetTextSpan(file: ts.SourceFile, lintMessage: Linter.LintMessage): ts.TextSpan;
    /**
     * Installs interceptions to the interceptor.
     *
     * @param interceptor
     * The interceptor to install the interceptions to.
     */
    protected InstallInterceptions(interceptor: Interceptor<ts.LanguageService>): void;
    /**
     * Converts a fix to a `TextChange` object.
     *
     * @param fix
     * The fix to convert.
     *
     * @returns
     * A `ts.TextChange` object representing the rule-fix.
     */
    private ConvertFixToTextChange;
    /**
     * Gets all lint-diagnostics with the specified rule-id in the specified file.
     *
     * @param fileName
     * The file to look for lint-diagnostics.
     *
     * @param ruleID
     * The rule-ID of the lint-diagnostics to look for.
     *
     * @returns
     * The `ILintDiagnostic`s with the specified `ruleID` for the specified file.
     */
    private GetLintDiagnostics;
    /**
     * Gets all lint-diagnostics with the specified rule-id in the specified file which provide fixes.
     *
     * @param fileName
     * The file to look for lint-diagnostics.
     *
     * @param ruleID
     * The rule-ID of the diagnostics to look for.
     *
     * @returns
     * All fixable diagnostics with the specified rule-id for the specified file.
     */
    private GetFixableDiagnostics;
    /**
     * Creates a fix-action.
     *
     * @param fileName
     * The name of the file to add the action to.
     *
     * @param lintMessage
     * The lint-message to convert.
     *
     * @returns
     * The newly created fix-action.
     */
    private CreateFixAction;
    /**
     * Creates a fix for all auto-fixables in the file with the specified `fileName`.
     *
     * @param fileName
     * The name of the file to create the fix for.
     *
     * @returns
     * The newly created fix-action.
     */
    private CreateFixAllQuickFix;
    /**
     * Creates a fix for disabling the rule for the specified `failure`.
     *
     * @param file
     * THe file to create the fix for.
     *
     * @param failure
     * The failure to disable.
     *
     * @returns
     * The newly created fix for disabling the rule.
     */
    private CreateDisableRuleFix;
    /**
     * Filters messages for the specified file.
     *
     * @param filePath
     * The file to get the messages for.
     *
     * @param report
     * An eslint-report.
     *
     * @returns
     * The messages for the specified file.
     */
    private FilterMessagesForFile;
}
