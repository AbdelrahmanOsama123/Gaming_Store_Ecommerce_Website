import { Interception } from "./Interception";
import { MethodInterception } from "./MethodInterceptor";
import { PropertyInterception } from "./PropertyInterceptor";
/**
 * Provides the functionality to intercept methods of an object.
 */
export declare class Interceptor<T extends object> {
    /**
     * The backup of the target of the interceptor.
     */
    private backup;
    /**
     * The target of the interceptor.
     */
    private target;
    /**
     * The proxy that invokes the interceptions.
     */
    private proxy;
    /**
     * The interceptions.
     */
    private interceptions;
    /**
     * A value indicating whether the interceptor is dispoed.
     */
    private disposed;
    /**
     * Initializes a new instance of the `Interceptor<T>` class.
     *
     * @param target
     * The target of the interceptor.
     *
     * @param freeze
     * A value indicating whether the state of the members .
     */
    constructor(target: T, freeze?: boolean);
    /**
     * Gets the target of the interceptor.
     */
    get Target(): T;
    /**
     * Gets the installed interceptions.
     */
    get Interceptions(): ReadonlyMap<keyof T, Interception<T, keyof T>>;
    /**
     * Gets the proxy for intercepting calls.
     */
    get Proxy(): T;
    /**
     * Gets a value indicating whether the interceptor is dispoed.
     */
    get Disposed(): boolean;
    /**
     * Adds a new property-interception.
     *
     * @param key
     * The key of the interception to add.
     *
     * @param interception
     * The interception to add.
     */
    AddProperty<TKey extends keyof T>(key: TKey, interception: PropertyInterception<T, TKey>): void;
    /**
     * Adds a new interception.
     *
     * @param key
     * The key of the interception to add.
     *
     * @param interception
     * The interception to add.
     */
    AddMethod<TKey extends keyof T>(key: TKey, interception: MethodInterception<T, TKey>): void;
    /**
     * Deletes an interception.
     *
     * @param key
     * The key to delete.
     */
    Delete(key: keyof T): void;
    /**
     * Disposes the interceptor.
     */
    Dispose(): void;
}
