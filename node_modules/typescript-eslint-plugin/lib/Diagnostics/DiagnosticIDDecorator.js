"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiagnosticIDDecorator = void 0;
const Constants_1 = require("../Constants");
/**
 * Provides the functionality to decorate fix-ids.
 */
class DiagnosticIDDecorator {
    /**
     * Initializes a new instance of the `FixIDDecorator` class.
     */
    constructor() {
        /**
         * A character for separating decorators.
         */
        this.separator = ":";
        /**
         * A set of characters for indicating a combined fix.
         */
        this.combinedFixDecorator = "all";
        /**
         * A set of characters for indicating a disable fix.
         */
        this.disableFixDecorator = "disable";
    }
    /**
     * Gets the decorator.
     */
    get Decorator() {
        return Constants_1.Constants.FixIdDecorator;
    }
    /**
     * Decorates a fix-id.
     *
     * @param fixId
     * The fix-id to decorate.
     *
     * @returns
     * The decorated fix.
     */
    DecorateFix(fixId) {
        return `${this.Decorator}${this.separator}${fixId}`;
    }
    /**
     * Decorates a fix-id.
     *
     * @param fixId
     * The fix-id to decorate.
     *
     * @returns
     * The decorated fix.
     */
    DecorateCombinedFix(fixId) {
        return this.DecorateFix(`${this.combinedFixDecorator}${this.separator}${fixId}`);
    }
    /**
     * Decorates a fix-id.
     *
     * @param fixId
     * The fix-id to decorate.
     *
     * @returns
     * The decorated fix.
     */
    DecorateDisableFix(fixId) {
        return this.DecorateFix(`${this.disableFixDecorator}${this.separator}${fixId}`);
    }
    /**
     * Removes the decoration from a fix-id.
     *
     * @param fixId
     * The fix-id to remove the decoration from.
     *
     * @returns
     * The fix-id with its decoration removed.
     */
    UndecorateFix(fixId) {
        return new RegExp(`^${this.Decorator}${this.separator}(?<ruleName>.*)`).exec(fixId).groups.ruleName;
    }
    /**
     * Removes the decoration from a fix-id.
     *
     * @param fixId
     * The fix-id to remove the decoration from.
     *
     * @returns
     * The fix-id with its decoration removed.
     */
    UndecorateCombinedFix(fixId) {
        var _a;
        return (_a = new RegExp(`^${this.combinedFixDecorator}${this.separator}(?<ruleName>.*)$`).exec(this.UndecorateFix(fixId)).groups) === null || _a === void 0 ? void 0 : _a.ruleName;
    }
    /**
     * Removes the decoration from a fix-id.
     *
     * @param fixId
     * The fix-id to remove the decoration from.
     *
     * @returns
     * The fix-id with its decoration removed.
     */
    UndecorateDisableFix(fixId) {
        var _a;
        return (_a = new RegExp(`^${this.disableFixDecorator}${this.separator}(?<ruleName>.*)$`).exec(this.UndecorateFix(fixId)).groups) === null || _a === void 0 ? void 0 : _a.ruleName;
    }
}
exports.DiagnosticIDDecorator = DiagnosticIDDecorator;
//# sourceMappingURL=DiagnosticIDDecorator.js.map