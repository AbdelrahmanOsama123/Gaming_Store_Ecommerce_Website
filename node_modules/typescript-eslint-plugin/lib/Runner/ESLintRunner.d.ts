import eslint = require("eslint");
import ts = require("typescript/lib/tsserverlibrary");
import { LoggerBase } from "../Logging/LoggerBase";
import { RunnerLogger } from "../Logging/RunnerLogger";
import { Plugin } from "../Plugin";
import { Configuration } from "../Settings/Configuration";
import { IRunnerResult } from "./IRunnerResult";
/**
 * Provides the functionality to run ESLint.
 */
export declare class ESLintRunner {
    /**
     * An empty result.
     */
    private static emptyResult;
    /**
     * The plugin of this runner.
     */
    private plugin;
    /**
     * A set of documents and functions for resolving their `CLIEngine`.
     */
    private document2LibraryCache;
    /**
     * The paths to the package-managers.
     */
    private packageManagerPaths;
    /**
     * Initializes a new instance of the `ESLintRunner` class.
     *
     * @param plugin
     * The plugin of the runner.
     */
    constructor(plugin: Plugin);
    /**
     * Gets the plugin of the runner.
     */
    get Plugin(): Plugin;
    /**
     * Gets the typescript-server.
     */
    get TypeScript(): typeof ts;
    /**
     * Gets a component for writing log-messages.
     */
    get RealLogger(): LoggerBase;
    /**
     * Gets a component for writing log-messages.
     */
    get Logger(): LoggerBase;
    /**
     * Gets a component for writing log-messages.
     */
    get RunnerLogger(): RunnerLogger;
    /**
     * Gets the configuration of the plugin.
     */
    get Config(): Configuration;
    /**
     * Gets the program of the language-server.
     */
    get Program(): ts.Program;
    /**
     * Gets the language-service host.
     */
    get LanguageServiceHost(): ts.LanguageServiceHost;
    /**
     * Checks a file using `eslint`.
     *
     * @param file
     * The file to check.
     *
     * @returns
     * The result of the lint.
     */
    RunESLint(file: ts.SourceFile): IRunnerResult;
    /**
     * Checks a file using `eslint`.
     *
     * @param file
     * The file to check.
     *
     * @param engine
     * The `eslint`-engine.
     *
     * @param warnings
     * An object for storing warnings.
     *
     * @returns
     * The result of the lint.
     */
    protected Run(file: ts.SourceFile, engine: eslint.CLIEngine, warnings: string[]): IRunnerResult;
    /**
     * Processes an error which reminds the user to install `eslint`.
     *
     * @param filePath
     * The path to the file to process an error for.
     *
     * @returns
     * The text for the error-message.
     */
    private GetInstallFailureMessage;
    /**
     * Determines the path to the specified `packageManager`.
     *
     * @param packageManager
     * The package-manager to get the path.
     *
     * @returns
     * The path to the global module-directory of the specified `PackageManager`.
     */
    private GetPackageManagerPath;
    /**
     * Loads the `CLIEngine` for the file with the specified `filePath`.
     *
     * @param filePath
     * The file to check.
     *
     * @returns
     * A method for loading the `CLIEngine`.
     */
    private LoadLibrary;
    /**
     * Resolves the path to the `eslint`-library.
     *
     * @param nodePath
     * The global path to resolve modules.
     *
     * @param cwd
     * The directory to resolve `eslint` from.
     *
     * @returns
     * The path to the `eslint`-module.
     */
    private ResolveESLint;
}
